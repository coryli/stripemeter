Hereâ€™s a single consolidated Markdown doc you can drop in as `docs/v0.2.0-docs-update.md`. It pulls together all the documentation updates youâ€™ll want to land before sealing the release.

````markdown
# StripeMeter v0.2.0 â€” Documentation & Release Updates

This document gathers all documentation changes required before tagging the **v0.2.0** release.  
It covers the changelog, README updates, new API docs, simulator docs, release notes, contributing guide, and GitHub templates.

---

## 1. CHANGELOG.md

```markdown
# Changelog

## v0.2.0 â€” 2025-09-06

### Added
- **Events List API**: `GET /v1/events` with pagination and filters.
- **Admin UI QoL**: Settings form values now persist across reloads.
- **Health & Metrics**: `/health/ready` reports dependency status; Prometheus metrics exposed.
- **Simulator Docs**: Getting Started with example scenarios and CI notes.

### Improved
- CI workflow coverage for simulator paths (fast PR run + nightly full).

### Notes
- Docs-first and API-stable release. No breaking changes.
````

---

## 2. README Updates

### Intro Blurb

```markdown
StripeMeter is an open-source usage metering toolkit that helps you test and verify Stripe Billing usage flows locally.  
In v0.2.0 you can ingest events, list them with filters, and run simulator scenarios while monitoring health and basic metrics.
```

### Quickstart

```markdown
## Quickstart (v0.2.0)

1) Install & build
pnpm install
pnpm build

2) Set env
Create `.env` at the project root with your Stripe test key:
STRIPE_API_KEY=sk_test_xxx

3) Run API
pnpm --filter @stripemeter/api dev

4) Run Admin UI (optional)
pnpm --filter @stripemeter/admin-ui dev

5) Health & Metrics
- Readiness: GET /health/ready
- Prometheus: GET /metrics

6) List Events
curl -s "http://localhost:3000/v1/events?tenantId=demo&limit=25" | jq
```

### Demo Flow

```markdown
## Demo: from empty to events list

1) Seed or ingest a few events.
2) Verify readiness:
   curl -s http://localhost:3000/health/ready | jq
3) Fetch events:
   curl -s "http://localhost:3000/v1/events?tenantId=demo&limit=10" | jq
4) Open Admin UI â†’ Settings â†’ tweak values â†’ reload to confirm persistence.
```

### Whatâ€™s in v0.2.0

```markdown
- `GET /v1/events` with pagination/filters
- `/health/ready` + `/metrics`
- Admin UI settings persistence
- Simulator docs + sample scenarios
```

---

## 3. API Docs â€” `docs/api/events.md`

```markdown
# API â€” Events (v0.2.0)

GET /v1/events

**Query params**
- tenantId (string, required)
- metric (string, optional)
- customerRef (string, optional)
- source (string, optional)
- limit (int, default 25)
- offset (int, default 0)
- sort (string, optional; e.g., -createdAt)

**Response**
{
  "events": [ ... ],
  "total": 0
}

**Examples**
curl -s "http://localhost:3000/v1/events?tenantId=demo&limit=25" | jq
curl -s "http://localhost:3000/v1/events?tenantId=demo&metric=requests&customerRef=cus_123" | jq
```

---

## 4. Simulator Docs â€” `docs/simulator/getting-started.md`

```markdown
# Simulator â€” Getting Started (v0.2.0)

## Run locally
pnpm install
pnpm build
pnpm --filter @stripemeter/simulator dev

## Example scenario
Edit the YAML/JSON in `packages/simulator/examples/` and run:
pnpm --filter @stripemeter/simulator run examples/basic.yaml

## Outputs
- Deterministic run results
- Basic assertions logged to console or report artifact
```

---

## 5. Release Notes â€” `RELEASE_NOTES_v0.2.0.md`

```markdown
## StripeMeter v0.2.0

### Highlights
- GET /v1/events with pagination and filters
- Admin UI settings persistence
- /health/ready and Prometheus /metrics
- Simulator docs and example scenarios

### Why this matters
- Quick visibility: list usage events in minutes.
- Better DX: settings stick between reloads.
- Sanity checks: health + metrics.
- Repeatable tests: simulator docs to standardize flows.

### Upgrade guide
No breaking changes. Pull latest, run pnpm install && pnpm build, start API/UI.
```

---

## 6. CONTRIBUTING.md

```markdown
# Contributing

## Local dev
pnpm install
pnpm build
pnpm --filter @stripemeter/api dev
pnpm --filter @stripemeter/admin-ui dev

## Good first issues
- Docs tweaks and examples
- Event list filters & pagination tests
- Small UI polish in Settings page

## Guidelines
- Keep PRs focused and small.
- Include a brief test plan in the PR description.
- Link the related issue.
```

---

## 7. GitHub Templates

### `.github/ISSUE_TEMPLATE/bug_report.md`

```markdown
---
name: Bug report
about: Help us fix something thatâ€™s broken
---

**What happened**
Steps to reproduce

**Expected**
What you expected to see

**Env**
Commit / OS / Node / pnpm versions

**Extra logs**
Relevant snippets (redact secrets)
```

### `.github/PULL_REQUEST_TEMPLATE.md`

```markdown
**What**
- brief summary

**Why**
- value to users/contributors

**Test Plan**
- commands run & observed outputs

**Related Issues**
- closes #
```

---

## 8. README Badges

```markdown
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)
[![Status: v0.2.0](https://img.shields.io/badge/Status-v0.2.0-blue)](#changelog)
```

---

## ðŸ“‹ Final Checklist

* [ ] Add CHANGELOG.md entry
* [ ] Update README intro, quickstart, demo, and badges
* [ ] Create `docs/api/events.md` and `docs/simulator/getting-started.md`
* [ ] Add `RELEASE_NOTES_v0.2.0.md`
* [ ] Add CONTRIBUTING.md
* [ ] Add GitHub templates for Issues/PRs
* [ ] Tag and publish v0.2.0 with release notes

```

---

Want me to make this a PR-ready commit (with file paths + commit message) so you can just apply it directly?
```
